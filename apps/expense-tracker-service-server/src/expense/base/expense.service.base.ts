/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Expense as PrismaExpense,
  Category as PrismaCategory,
  User as PrismaUser,
} from "@prisma/client";

export class ExpenseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ExpenseCountArgs, "select">): Promise<number> {
    return this.prisma.expense.count(args);
  }

  async expenses<T extends Prisma.ExpenseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpenseFindManyArgs>
  ): Promise<PrismaExpense[]> {
    return this.prisma.expense.findMany<Prisma.ExpenseFindManyArgs>(args);
  }
  async expense<T extends Prisma.ExpenseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpenseFindUniqueArgs>
  ): Promise<PrismaExpense | null> {
    return this.prisma.expense.findUnique(args);
  }
  async createExpense<T extends Prisma.ExpenseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpenseCreateArgs>
  ): Promise<PrismaExpense> {
    return this.prisma.expense.create<T>(args);
  }
  async updateExpense<T extends Prisma.ExpenseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpenseUpdateArgs>
  ): Promise<PrismaExpense> {
    return this.prisma.expense.update<T>(args);
  }
  async deleteExpense<T extends Prisma.ExpenseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpenseDeleteArgs>
  ): Promise<PrismaExpense> {
    return this.prisma.expense.delete(args);
  }

  async getCategory(parentId: string): Promise<PrismaCategory | null> {
    return this.prisma.expense
      .findUnique({
        where: { id: parentId },
      })
      .category();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.expense
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
